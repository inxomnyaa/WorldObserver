<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fNbt</name>
    </assembly>
    <members>
        <member name="T:fNbt.InvalidReaderStateException">
            <summary> Exception thrown when an operation is attempted on an NbtReader that
            cannot recover from a previous parsing error. </summary>
        </member>
        <member name="T:fNbt.NbtCompression">
            <summary> Compression method used for loading/saving NBT files. </summary>
        </member>
        <member name="F:fNbt.NbtCompression.AutoDetect">
            <summary> Automatically detect file compression. Not a valid format for saving. </summary>
        </member>
        <member name="F:fNbt.NbtCompression.None">
            <summary> No compression. </summary>
        </member>
        <member name="F:fNbt.NbtCompression.GZip">
            <summary> Compressed, with GZip header (default). </summary>
        </member>
        <member name="F:fNbt.NbtCompression.ZLib">
            <summary> Compressed, with ZLib header (RFC-1950). </summary>
        </member>
        <member name="T:fNbt.NbtFormatException">
            <summary> Exception thrown when a format violation is detected while
            parsing or serializing an NBT file. </summary>
        </member>
        <member name="T:fNbt.NbtBinaryReader">
            <summary> BinaryReader wrapper that takes care of reading primitives from an NBT stream,
            while taking care of endianness, string encoding, and skipping. </summary>
        </member>
        <member name="T:fNbt.NbtBinaryWriter">
            <summary> BinaryWriter wrapper that writes NBT primitives to a stream,
            while taking care of endianness and string encoding, and counting bytes written. </summary>
        </member>
        <member name="T:fNbt.NbtReader">
            <summary> Represents a reader that provides fast, non-cached, forward-only access to NBT data.
            Each instance of NbtReader reads one complete file. </summary>
        </member>
        <member name="M:fNbt.NbtReader.#ctor(System.IO.Stream)">
            <summary> Initializes a new instance of the NbtReader class. </summary>
            <param name="stream"> Stream to read from. </param>
            <remarks> Assumes that data in the stream is Big-Endian encoded. </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="stream"/> is not readable. </exception>
        </member>
        <member name="M:fNbt.NbtReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary> Initializes a new instance of the NbtReader class. </summary>
            <param name="stream"> Stream to read from. </param>
            <param name="bigEndian"> Whether NBT data is in Big-Endian encoding. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="stream"/> is not readable. </exception>
        </member>
        <member name="P:fNbt.NbtReader.RootName">
            <summary> Gets the name of the root tag of this NBT stream. </summary>
        </member>
        <member name="P:fNbt.NbtReader.ParentName">
            <summary> Gets the name of the parent tag. May be null (for root tags and descendants of list elements). </summary>
        </member>
        <member name="P:fNbt.NbtReader.TagName">
            <summary> Gets the name of the current tag. May be null (for list elements and end tags). </summary>
        </member>
        <member name="P:fNbt.NbtReader.ParentTagType">
            <summary> Gets the type of the parent tag. Returns TagType.Unknown if there is no parent tag. </summary>
        </member>
        <member name="P:fNbt.NbtReader.TagType">
            <summary> Gets the type of the current tag. </summary>
        </member>
        <member name="P:fNbt.NbtReader.IsListElement">
            <summary> Whether tag that we are currently on is a list element. </summary>
        </member>
        <member name="P:fNbt.NbtReader.HasValue">
            <summary> Whether current tag has a value to read. </summary>
        </member>
        <member name="P:fNbt.NbtReader.HasName">
            <summary> Whether current tag has a name. </summary>
        </member>
        <member name="P:fNbt.NbtReader.IsAtStreamEnd">
            <summary> Whether this reader has reached the end of stream. </summary>
        </member>
        <member name="P:fNbt.NbtReader.IsCompound">
            <summary> Whether the current tag is a Compound. </summary>
        </member>
        <member name="P:fNbt.NbtReader.IsList">
            <summary> Whether the current tag is a List. </summary>
        </member>
        <member name="P:fNbt.NbtReader.HasLength">
            <summary> Whether the current tag has length (Lists, ByteArrays, and IntArrays have length).
            Compound tags also have length, technically, but it is not known until all child tags are read. </summary>
        </member>
        <member name="P:fNbt.NbtReader.BaseStream">
            <summary> Gets the Stream from which data is being read. </summary>
        </member>
        <member name="P:fNbt.NbtReader.TagStartOffset">
            <summary> Gets the number of bytes from the beginning of the stream to the beginning of this tag.
            If the stream is not seekable, this value will always be 0. </summary>
        </member>
        <member name="P:fNbt.NbtReader.TagsRead">
            <summary> Gets the number of tags read from the stream so far
            (including the current tag and all skipped tags). 
            If <c>SkipEndTags</c> is <c>false</c>, all end tags are also counted. </summary>
        </member>
        <member name="P:fNbt.NbtReader.Depth">
            <summary> Gets the depth of the current tag in the hierarchy.
            <c>RootTag</c> is at depth 1, its descendant tags are 2, etc. </summary>
        </member>
        <member name="P:fNbt.NbtReader.ListType">
            <summary> If the current tag is TAG_List, returns type of the list elements. </summary>
        </member>
        <member name="P:fNbt.NbtReader.TagLength">
            <summary> If the current tag is TAG_List, TAG_Byte_Array, or TAG_Int_Array, returns the number of elements. </summary>
        </member>
        <member name="P:fNbt.NbtReader.ParentTagLength">
            <summary> If the parent tag is TAG_List, returns the number of elements. </summary>
        </member>
        <member name="P:fNbt.NbtReader.ListIndex">
            <summary> If the parent tag is TAG_List, returns index of the current tag. </summary>
        </member>
        <member name="P:fNbt.NbtReader.IsInErrorState">
            <summary> Gets whether this NbtReader instance is in state of error.
            No further reading can be done from this instance if a parse error occurred. </summary>
        </member>
        <member name="M:fNbt.NbtReader.ReadToFollowing">
            <summary> Reads the next tag from the stream. </summary>
            <returns> true if the next tag was read successfully; false if there are no more tags to read. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadToFollowing(System.String)">
            <summary> Reads until a tag with the specified name is found. 
            Returns false if are no more tags to read (end of stream is reached). </summary>
            <param name="tagName"> Name of the tag. May be null (to look for next unnamed tag). </param>
            <returns> <c>true</c> if a matching tag is found; otherwise <c>false</c>. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.InvalidOperationException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadToDescendant(System.String)">
            <summary> Advances the NbtReader to the next descendant tag with the specified name.
            If a matching child tag is not found, the NbtReader is positioned on the end tag. </summary>
            <param name="tagName"> Name of the tag you wish to move to. May be null (to look for next unnamed tag). </param>
            <returns> <c>true</c> if a matching descendant tag is found; otherwise <c>false</c>. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadToNextSibling">
            <summary> Advances the NbtReader to the next sibling tag, skipping any child tags.
            If there are no more siblings, NbtReader is positioned on the tag following the last of this tag's descendants. </summary>
            <returns> <c>true</c> if a sibling element is found; otherwise <c>false</c>. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadToNextSibling(System.String)">
            <summary> Advances the NbtReader to the next sibling tag with the specified name.
            If a matching sibling tag is not found, NbtReader is positioned on the tag following the last siblings. </summary>
            <param name="tagName"> The name of the sibling tag you wish to move to. </param>
            <returns> <c>true</c> if a matching sibling element is found; otherwise <c>false</c>. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.InvalidOperationException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.Skip">
            <summary> Skips current tag, its value/descendants, and any following siblings.
            In other words, reads until parent tag's sibling. </summary>
            <returns> Total number of tags that were skipped. Returns 0 if end of the stream is reached. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadAsTag">
            <summary> Reads the entirety of the current tag, including any descendants,
            and constructs an NbtTag object of the appropriate type. </summary>
            <returns> Constructed NbtTag object;
            <c>null</c> if <c>SkipEndTags</c> is <c>true</c> and trying to read an End tag. </returns>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> End of stream has been reached (no more tags can be read). </exception>
            <exception cref="T:System.InvalidOperationException"> Tag value has already been read, and CacheTagValues is false. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadValueAs``1">
            <summary> Reads the value as an object of the type specified. </summary>
            <typeparam name="T"> The type of the value to be returned.
            Tag value should be convertible to this type. </typeparam>
            <returns> Tag value converted to the requested type. </returns>
            <exception cref="T:System.IO.EndOfStreamException"> End of stream has been reached (no more tags can be read). </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.InvalidOperationException"> Value has already been read, or there is no value to read. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
            <exception cref="T:System.InvalidCastException"> Tag value cannot be converted to the requested type. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadValue">
            <summary> Reads the value as an object of the correct type, boxed.
            Cannot be called for tags that do not have a single-object value (compound, list, and end tags). </summary>
            <returns> Tag value converted to the requested type. </returns>
            <exception cref="T:System.IO.EndOfStreamException"> End of stream has been reached (no more tags can be read). </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.InvalidOperationException"> Value has already been read, or there is no value to read. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
        </member>
        <member name="M:fNbt.NbtReader.ReadListAsArray``1">
            <summary> If the current tag is a List, reads all elements of this list as an array.
            If any tags/values have already been read from this list, only reads the remaining unread tags/values.
            ListType must be a value type (byte, short, int, long, float, double, or string).
            Stops reading after the last list element. </summary>
            <typeparam name="T"> Element type of the array to be returned.
            Tag contents should be convertible to this type. </typeparam>
            <returns> List contents converted to an array of the requested type. </returns>
            <exception cref="T:System.IO.EndOfStreamException"> End of stream has been reached (no more tags can be read). </exception>
            <exception cref="T:System.InvalidOperationException"> Current tag is not of type List. </exception>
            <exception cref="T:fNbt.InvalidReaderStateException"> If NbtReader cannot recover from a previous parsing error. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="P:fNbt.NbtReader.SkipEndTags">
            <summary> Parsing option: Whether NbtReader should skip End tags in ReadToFollowing() automatically while parsing.
            Default is <c>true</c>. </summary>
        </member>
        <member name="P:fNbt.NbtReader.CacheTagValues">
            <summary> Parsing option: Whether NbtReader should save a copy of the most recently read tag's value.
            Unless CacheTagValues is <c>true</c>, tag values can only be read once. Default is <c>false</c>. </summary>
        </member>
        <member name="M:fNbt.NbtReader.ToString">
            <summary> Returns a String that represents the tag currently being read by this NbtReader instance.
            Prints current tag's depth, ordinal number, type, name, and size (for arrays and lists). Does not print value.
            Indents the tag according default indentation (NbtTag.DefaultIndentString). </summary>
        </member>
        <member name="M:fNbt.NbtReader.ToString(System.Boolean)">
            <summary> Returns a String that represents the tag currently being read by this NbtReader instance.
            Prints current tag's depth, ordinal number, type, name, size (for arrays and lists), and optionally value.
            Indents the tag according default indentation (NbtTag.DefaultIndentString). </summary>
            <param name="includeValue"> If set to <c>true</c>, also reads and prints the current tag's value. 
            Note that unless CacheTagValues is set to <c>true</c>, you can only read every tag's value ONCE. </param>
        </member>
        <member name="M:fNbt.NbtReader.ToString(System.Boolean,System.String)">
            <summary> Returns a String that represents the current NbtReader object.
            Prints current tag's depth, ordinal number, type, name, size (for arrays and lists), and optionally value. </summary>
            <param name="indentString"> String to be used for indentation. May be empty string, but may not be <c>null</c>. </param>
            <param name="includeValue"> If set to <c>true</c>, also reads and prints the current tag's value. </param>
        </member>
        <member name="T:fNbt.NbtWriter">
            <summary> An efficient writer for writing NBT data directly to streams.
            Each instance of NbtWriter writes one complete file. 
            NbtWriter enforces all constraints of the NBT file format
            EXCEPT checking for duplicate tag names within a compound. </summary>
        </member>
        <member name="M:fNbt.NbtWriter.#ctor(System.IO.Stream,System.String)">
            <summary> Initializes a new instance of the NbtWriter class. </summary>
            <param name="stream"> Stream to write to. </param>
            <param name="rootTagName"> Name to give to the root tag (written immediately). </param>
            <remarks> Assumes that data in the stream should be Big-Endian encoded. </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> or <paramref name="rootTagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="stream"/> is not writable. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.#ctor(System.IO.Stream,System.String,System.Boolean)">
            <summary> Initializes a new instance of the NbtWriter class. </summary>
            <param name="stream"> Stream to write to. </param>
            <param name="rootTagName"> Name to give to the root tag (written immediately). </param>
            <param name="bigEndian"> Whether NBT data should be in Big-Endian encoding. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> or <paramref name="rootTagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="stream"/> is not writable. </exception>
        </member>
        <member name="P:fNbt.NbtWriter.IsDone">
            <summary> Gets whether the root tag has been closed.
            No more tags may be written after the root tag has been closed. </summary>
        </member>
        <member name="P:fNbt.NbtWriter.BaseStream">
            <summary> Gets the underlying stream of the NbtWriter. </summary>
        </member>
        <member name="M:fNbt.NbtWriter.BeginCompound">
            <summary> Begins an unnamed compound tag. </summary>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named compound tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.BeginCompound(System.String)">
            <summary> Begins a named compound tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed compound tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.EndCompound">
            <summary> Ends a compound tag. </summary>
            <exception cref="T:fNbt.NbtFormatException"> Not currently in a compound. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.BeginList(fNbt.NbtTagType,System.Int32)">
            <summary> Begins an unnamed list tag. </summary>
            <param name="elementType"> Type of elements of this list. </param>
            <param name="size"> Number of elements in this list. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named list tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="size"/> is negative -OR-
            <paramref name="elementType"/> is not a valid NbtTagType. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.BeginList(System.String,fNbt.NbtTagType,System.Int32)">
            <summary> Begins an unnamed list tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="elementType"> Type of elements of this list. </param>
            <param name="size"> Number of elements in this list. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed list tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="size"/> is negative -OR-
            <paramref name="elementType"/> is not a valid NbtTagType. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.EndList">
            <summary> Ends a list tag. </summary>
            <exception cref="T:fNbt.NbtFormatException"> Not currently in a list -OR-
            not all list elements have been written yet. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByte(System.Byte)">
            <summary> Writes an unnamed byte tag. </summary>
            <param name="value"> The unsigned byte to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named byte tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByte(System.String,System.Byte)">
            <summary> Writes an unnamed byte tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The unsigned byte to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteDouble(System.Double)">
            <summary> Writes an unnamed double tag. </summary>
            <param name="value"> The eight-byte floating-point value to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named double tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteDouble(System.String,System.Double)">
            <summary> Writes an unnamed byte tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The unsigned byte to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteFloat(System.Single)">
            <summary> Writes an unnamed float tag. </summary>
            <param name="value"> The four-byte floating-point value to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named float tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteFloat(System.String,System.Single)">
            <summary> Writes an unnamed float tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The four-byte floating-point value to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed float tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteInt(System.Int32)">
            <summary> Writes an unnamed int tag. </summary>
            <param name="value"> The four-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named int tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteInt(System.String,System.Int32)">
            <summary> Writes an unnamed int tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The four-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed int tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteLong(System.Int64)">
            <summary> Writes an unnamed long tag. </summary>
            <param name="value"> The eight-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named long tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteLong(System.String,System.Int64)">
            <summary> Writes an unnamed long tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The eight-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed long tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteShort(System.Int16)">
            <summary> Writes an unnamed short tag. </summary>
            <param name="value"> The two-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named short tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteShort(System.String,System.Int16)">
            <summary> Writes an unnamed short tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The two-byte signed integer to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed short tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteString(System.String)">
            <summary> Writes an unnamed string tag. </summary>
            <param name="value"> The string to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named string tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteString(System.String,System.String)">
            <summary> Writes an unnamed string tag. </summary>
            <param name="tagName"> Name to give to this compound tag. May not be null. </param>
            <param name="value"> The string to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed string tag was expected -OR- a tag of a different type was expected. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.Byte[])">
            <summary> Writes an unnamed byte array tag, copying data from an array. </summary>
            <param name="data"> A byte array containing the data to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named byte array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data"/> is null </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary> Writes an unnamed byte array tag, copying data from an array. </summary>
            <param name="data"> A byte array containing the data to write. </param>
            <param name="offset"> The starting point in <paramref name="data"/> at which to begin writing. Must not be negative. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named byte array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset"/> or
            <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data"/> is null </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="count"/> is greater than
            <paramref name="offset"/> subtracted from the array length. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.String,System.Byte[])">
            <summary> Writes a named byte array tag, copying data from an array. </summary>
            <param name="tagName"> Name to give to this byte array tag. May not be null. </param>
            <param name="data"> A byte array containing the data to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or
            <paramref name="data"/> is null </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary> Writes a named byte array tag, copying data from an array. </summary>
            <param name="tagName"> Name to give to this byte array tag. May not be null. </param>
            <param name="data"> A byte array containing the data to write. </param>
            <param name="offset"> The starting point in <paramref name="data"/> at which to begin writing. Must not be negative. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset"/> or
            <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or
            <paramref name="data"/> is null </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="count"/> is greater than
            <paramref name="offset"/> subtracted from the array length. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.IO.Stream,System.Int32)">
            <summary> Writes an unnamed byte array tag, copying data from a stream. </summary>
            <remarks> A temporary buffer will be allocated, of size up to 8192 bytes.
            To manually specify a buffer, use one of the other WriteByteArray() overloads. </remarks>
            <param name="dataSource"> A Stream from which data will be copied. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named byte array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> Given stream does not support reading. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.IO.Stream,System.Int32,System.Byte[])">
            <summary> Writes an unnamed byte array tag, copying data from a stream. </summary>
            <param name="dataSource"> A Stream from which data will be copied. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <param name="buffer"> Buffer to use for copying. Size must be greater than 0. Must not be null. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named byte array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> Given stream does not support reading -OR-
            <paramref name="buffer"/> size is 0. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.String,System.IO.Stream,System.Int32)">
            <summary> Writes a named byte array tag, copying data from a stream. </summary>
            <remarks> A temporary buffer will be allocated, of size up to 8192 bytes.
            To manually specify a buffer, use one of the other WriteByteArray() overloads. </remarks>
            <param name="tagName"> Name to give to this byte array tag. May not be null. </param>
            <param name="dataSource"> A Stream from which data will be copied. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> Given stream does not support reading. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteByteArray(System.String,System.IO.Stream,System.Int32,System.Byte[])">
            <summary> Writes an unnamed byte array tag, copying data from another stream. </summary>
            <param name="tagName"> Name to give to this byte array tag. May not be null. </param>
            <param name="dataSource"> A Stream from which data will be copied. </param>
            <param name="count"> The number of bytes to write. Must not be negative. </param>
            <param name="buffer"> Buffer to use for copying. Size must be greater than 0. Must not be null. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed byte array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> Given stream does not support reading -OR-
            <paramref name="buffer"/> size is 0. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteIntArray(System.Int32[])">
            <summary> Writes an unnamed int array tag, copying data from an array. </summary>
            <param name="data"> An int array containing the data to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named int array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data"/> is null </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteIntArray(System.Int32[],System.Int32,System.Int32)">
            <summary> Writes an unnamed int array tag, copying data from an array. </summary>
            <param name="data"> An int array containing the data to write. </param>
            <param name="offset"> The starting point in <paramref name="data"/> at which to begin writing. Must not be negative. </param>
            <param name="count"> The number of elements to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            a named int array tag was expected -OR- a tag of a different type was expected -OR-
            the size of a parent list has been exceeded. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset"/> or
            <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data"/> is null </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="count"/> is greater than
            <paramref name="offset"/> subtracted from the array length. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteIntArray(System.String,System.Int32[])">
            <summary> Writes a named int array tag, copying data from an array. </summary>
            <param name="tagName"> Name to give to this int array tag. May not be null. </param>
            <param name="data"> An int array containing the data to write. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed int array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or
            <paramref name="data"/> is null </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteIntArray(System.String,System.Int32[],System.Int32,System.Int32)">
            <summary> Writes a named int array tag, copying data from an array. </summary>
            <param name="tagName"> Name to give to this int array tag. May not be null. </param>
            <param name="data"> An int array containing the data to write. </param>
            <param name="offset"> The starting point in <paramref name="data"/> at which to begin writing. Must not be negative. </param>
            <param name="count"> The number of elements to write. Must not be negative. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR-
            an unnamed int array tag was expected -OR- a tag of a different type was expected. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset"/> or
            <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> or
            <paramref name="data"/> is null </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="count"/> is greater than
            <paramref name="offset"/> subtracted from the array length. </exception>
        </member>
        <member name="M:fNbt.NbtWriter.WriteTag(fNbt.NbtTag)">
            <summary> Writes a NbtTag object, and all of its child tags, to stream.
            Use this method sparingly with NbtWriter -- constructing NbtTag objects defeats the purpose of this class.
            If you already have lots of NbtTag objects, you might as well use NbtFile to write them all at once. </summary>
            <param name="tag"> Tag to write. Must not be null. </param>
            <exception cref="T:fNbt.NbtFormatException"> No more tags can be written -OR- given tag is unacceptable at this time. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is null </exception>
        </member>
        <member name="M:fNbt.NbtWriter.Finish">
            <summary> Ensures that file has been written in its entirety, with no tags left open.
            This method is for verification only, and does not actually write any data. 
            Calling this method is optional (but probably a good idea, to catch any usage errors). </summary>
            <exception cref="T:fNbt.NbtFormatException"> Not all tags have been closed yet. </exception>
        </member>
        <member name="T:fNbt.NbtFile">
            <summary> Represents a complete NBT file. </summary>
        </member>
        <member name="P:fNbt.NbtFile.FileName">
            <summary> Gets the file name used for most recent loading/saving of this file.
            May be <c>null</c>, if this <c>NbtFile</c> instance has not been loaded from, or saved to, a file. </summary>
        </member>
        <member name="P:fNbt.NbtFile.FileCompression">
            <summary> Gets the compression method used for most recent loading/saving of this file.
            Defaults to AutoDetect. </summary>
        </member>
        <member name="P:fNbt.NbtFile.RootTag">
            <summary> Root tag of this file. Must be a named CompoundTag. Defaults to an empty-named tag. </summary>
            <exception cref="T:System.ArgumentException"> If given tag is unnamed. </exception>
        </member>
        <member name="P:fNbt.NbtFile.BigEndianByDefault">
            <summary> Whether new NbtFiles should default to big-endian encoding (default: true). </summary>
        </member>
        <member name="P:fNbt.NbtFile.BigEndian">
            <summary> Whether this file should read/write tags in big-endian encoding format. </summary>
        </member>
        <member name="P:fNbt.NbtFile.DefaultBufferSize">
            <summary> Gets or sets the default value of <c>BufferSize</c> property. Default is 8192. 
            Set to 0 to disable buffering by default. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> value is negative. </exception>
        </member>
        <member name="P:fNbt.NbtFile.BufferSize">
            <summary> Gets or sets the size of internal buffer used for reading files and streams.
            Initialized to value of <c>DefaultBufferSize</c> property. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> value is negative. </exception>
        </member>
        <member name="M:fNbt.NbtFile.#ctor">
            <summary> Creates an empty NbtFile.
            RootTag will be set to an empty <c>NbtCompound</c> with a blank name (""). </summary>
        </member>
        <member name="M:fNbt.NbtFile.#ctor(fNbt.NbtCompound)">
            <summary> Creates a new NBT file with the given root tag. </summary>
            <param name="rootTag"> Compound tag to set as the root tag. May be <c>null</c>. </param>
            <exception cref="T:System.ArgumentException"> If given <paramref name="rootTag"/> is unnamed. </exception>
        </member>
        <member name="M:fNbt.NbtFile.#ctor(System.String)">
            <summary> Loads NBT data from a file using the most common settings.
            Automatically detects compression. Assumes the file to be big-endian, and uses default buffer size. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromFile(System.String)">
            <summary> Loads NBT data from a file. Existing <c>RootTag</c> will be replaced. Compression will be auto-detected. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <returns> Number of bytes read from the file. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromFile(System.String,fNbt.NbtCompression,fNbt.TagSelector)">
            <summary> Loads NBT data from a file. Existing <c>RootTag</c> will be replaced. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <param name="selector"> Optional callback to select which tags to load into memory. Root may not be skipped.
            No reference is stored to this callback after loading (don't worry about implicitly captured closures). May be <c>null</c>. </param>
            <returns> Number of bytes read from the file. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromBuffer(System.Byte[],System.Int32,System.Int32,fNbt.NbtCompression,fNbt.TagSelector)">
            <summary> Loads NBT data from a byte array. Existing <c>RootTag</c> will be replaced. <c>FileName</c> will be set to null. </summary>
            <param name="buffer"> Stream from which data will be loaded. If <paramref name="compression"/> is set to AutoDetect, this stream must support seeking. </param>
            <param name="index"> The index into <paramref name="buffer"/> at which the stream begins. Must not be negative. </param>
            <param name="length"> Maximum number of bytes to read from the given buffer. Must not be negative.
            An <see cref="T:System.IO.EndOfStreamException"/> is thrown if NBT stream is longer than the given length. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <param name="selector"> Optional callback to select which tags to load into memory. Root may not be skipped.
            No reference is stored to this callback after loading (don't worry about implicitly captured closures). May be <c>null</c>. </param>
            <returns> Number of bytes read from the buffer. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="buffer"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>;
            if <paramref name="index"/> or <paramref name="length"/> is less than zero;
            if the sum of <paramref name="index"/> and <paramref name="length"/> is greater than the length of <paramref name="buffer"/>. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If NBT stream extends beyond the given <paramref name="length"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromBuffer(System.Byte[],System.Int32,System.Int32,fNbt.NbtCompression)">
            <summary> Loads NBT data from a byte array. Existing <c>RootTag</c> will be replaced. <c>FileName</c> will be set to null. </summary>
            <param name="buffer"> Stream from which data will be loaded. If <paramref name="compression"/> is set to AutoDetect, this stream must support seeking. </param>
            <param name="index"> The index into <paramref name="buffer"/> at which the stream begins. Must not be negative. </param>
            <param name="length"> Maximum number of bytes to read from the given buffer. Must not be negative.
            An <see cref="T:System.IO.EndOfStreamException"/> is thrown if NBT stream is longer than the given length. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <returns> Number of bytes read from the buffer. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="buffer"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>;
            if <paramref name="index"/> or <paramref name="length"/> is less than zero;
            if the sum of <paramref name="index"/> and <paramref name="length"/> is greater than the length of <paramref name="buffer"/>. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If NBT stream extends beyond the given <paramref name="length"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromStream(System.IO.Stream,fNbt.NbtCompression,fNbt.TagSelector)">
            <summary> Loads NBT data from a stream. Existing <c>RootTag</c> will be replaced </summary>
            <param name="stream"> Stream from which data will be loaded. If compression is set to AutoDetect, this stream must support seeking. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <param name="selector"> Optional callback to select which tags to load into memory. Root may not be skipped.
            No reference is stored to this callback after loading (don't worry about implicitly captured closures). May be <c>null</c>. </param>
            <returns> Number of bytes read from the stream. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.NotSupportedException"> If <paramref name="compression"/> is set to AutoDetect, but the stream is not seekable. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, decompressing failed, or given stream does not support reading. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="M:fNbt.NbtFile.LoadFromStream(System.IO.Stream,fNbt.NbtCompression)">
            <summary> Loads NBT data from a stream. Existing <c>RootTag</c> will be replaced </summary>
            <param name="stream"> Stream from which data will be loaded. If compression is set to AutoDetect, this stream must support seeking. </param>
            <param name="compression"> Compression method to use for loading/saving this file. </param>
            <returns> Number of bytes read from the stream. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.NotSupportedException"> If <paramref name="compression"/> is set to AutoDetect, but the stream is not seekable. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, decompressing failed, or given stream does not support reading. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="M:fNbt.NbtFile.SaveToFile(System.String,fNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is <c>null</c>. </summary>
            <param name="fileName"> File to write data to. May not be <c>null</c>. </param>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <returns> Number of bytes written to the file. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the <paramref name="compression"/> mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while creating the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> Specified file is read-only, or a permission issue occurred. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="M:fNbt.NbtFile.SaveToBuffer(System.Byte[],System.Int32,fNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is <c>null</c>. </summary>
            <param name="buffer"> Buffer to write data to. May not be <c>null</c>. </param>
            <param name="index"> The index into <paramref name="buffer"/> at which the stream should begin. </param>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <returns> Number of bytes written to the buffer. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="buffer"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the <paramref name="compression"/> mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>;
            if <paramref name="index"/> is less than zero; or if <paramref name="index"/> is greater than the length of <paramref name="buffer"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> Specified file is read-only, or a permission issue occurred. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="M:fNbt.NbtFile.SaveToBuffer(fNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is <c>null</c>. </summary>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <returns> Byte array containing the serialized NBT data. </returns>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the <paramref name="compression"/> mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> Specified file is read-only, or a permission issue occurred. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="M:fNbt.NbtFile.SaveToStream(System.IO.Stream,fNbt.NbtCompression)">
            <summary> Saves this NBT file to a stream. Nothing is written to stream if RootTag is <c>null</c>. </summary>
            <param name="stream"> Stream to write data to. May not be <c>null</c>. </param>
            <param name="compression"> Compression mode to use for saving. May not be AutoDetect. </param>
            <returns> Number of bytes written to the stream. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If AutoDetect was given as the <paramref name="compression"/> mode. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If given stream does not support writing. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If RootTag is null;
            or if RootTag is unnamed;
            or if one of the NbtCompound tags contained unnamed tags;
            or if an NbtList tag had Unknown list type and no elements. </exception>
        </member>
        <member name="M:fNbt.NbtFile.ReadRootTagName(System.String)">
            <summary> Reads the root name from the given NBT file. Automatically detects compression. </summary>
            <param name="fileName"> Name of the file from which first tag will be read. </param>
            <returns> Name of the root tag in the given NBT file. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:fNbt.NbtFile.ReadRootTagName(System.String,fNbt.NbtCompression,System.Boolean,System.Int32)">
            <summary> Reads the root name from the given NBT file. </summary>
            <param name="fileName"> Name of the file from which data will be loaded. </param>
            <param name="compression"> Format in which the given file is compressed. </param>
            <param name="bigEndian"> Whether the file uses big-endian (default) or little-endian encoding. </param>
            <param name="bufferSize"> Buffer size to use for reading, in bytes. Default is 8192. </param>
            <returns> Name of the root tag in the given NBT file. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> If given file was not found. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, or decompressing failed. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
            <exception cref="T:System.IO.IOException"> If an I/O error occurred while reading the file. </exception>
        </member>
        <member name="M:fNbt.NbtFile.ReadRootTagName(System.IO.Stream,fNbt.NbtCompression,System.Boolean,System.Int32)">
            <summary> Reads the root name from the given stream of NBT data. </summary>
            <param name="stream"> Stream from which data will be loaded. If compression is set to AutoDetect, this stream must support seeking. </param>
            <param name="compression"> Compression method to use for loading this stream. </param>
            <param name="bigEndian"> Whether the stream uses big-endian (default) or little-endian encoding. </param>
            <param name="bufferSize"> Buffer size to use for reading, in bytes. Default is 8192. </param>
            <returns> Name of the root tag in the given stream. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If an unrecognized/unsupported value was given for <paramref name="compression"/>. </exception>
            <exception cref="T:System.NotSupportedException"> If compression is set to AutoDetect, but the stream is not seekable. </exception>
            <exception cref="T:System.IO.EndOfStreamException"> If file ended earlier than expected. </exception>
            <exception cref="T:System.IO.InvalidDataException"> If file compression could not be detected, decompressing failed, or given stream does not support reading. </exception>
            <exception cref="T:fNbt.NbtFormatException"> If an error occurred while parsing data in NBT format. </exception>
        </member>
        <member name="M:fNbt.NbtFile.ToString">
            <summary> Prints contents of the root tag, and any child tags, to a string. </summary>
        </member>
        <member name="M:fNbt.NbtFile.ToString(System.String)">
            <summary> Prints contents of the root tag, and any child tags, to a string.
            Indents the string using multiples of the given indentation string. </summary>
            <param name="indentString"> String to be used for indentation. </param>
            <returns> A string representing contents of this tag, and all child tags (if any). </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="indentString"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.TagSelector">
            <summary> Delegate used to skip loading certain tags of an NBT stream/file. 
            The callback should return "true" for any tag that should be read,and "false" for any tag that should be skipped. </summary>
            <param name="tag"> Tag that is being read. Tag's type and name are available,
            but the value has not yet been read at this time. Guaranteed to never be <c>null</c>. </param>
        </member>
        <member name="T:fNbt.NbtIntArray">
            <summary> A tag containing an array of signed 32-bit integers. </summary>
        </member>
        <member name="P:fNbt.NbtIntArray.TagType">
            <summary> Type of this tag (ByteArray). </summary>
        </member>
        <member name="P:fNbt.NbtIntArray.Value">
            <summary> Value/payload of this tag (an array of signed 32-bit integers). Value is stored as-is and is NOT cloned. May not be <c>null</c>. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtIntArray.#ctor">
            <summary> Creates an unnamed NbtIntArray tag, containing an empty array of ints. </summary>
        </member>
        <member name="M:fNbt.NbtIntArray.#ctor(System.Int32[])">
            <summary> Creates an unnamed NbtIntArray tag, containing the given array of ints. </summary>
            <param name="value"> Int array to assign to this tag's Value. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
            <remarks> Given int array will be cloned. To avoid unnecessary copying, call one of the other constructor
            overloads (that do not take a int[]) and then set the Value property yourself. </remarks>
        </member>
        <member name="M:fNbt.NbtIntArray.#ctor(System.String)">
            <summary> Creates an NbtIntArray tag with the given name, containing an empty array of ints. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtIntArray.#ctor(System.String,System.Int32[])">
            <summary> Creates an NbtIntArray tag with the given name, containing the given array of ints. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Int array to assign to this tag's Value. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
            <remarks> Given int array will be cloned. To avoid unnecessary copying, call one of the other constructor
            overloads (that do not take a int[]) and then set the Value property yourself. </remarks>
        </member>
        <member name="M:fNbt.NbtIntArray.#ctor(fNbt.NbtIntArray)">
            <summary> Creates a deep copy of given NbtIntArray. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
            <remarks> Int array of given tag will be cloned. </remarks>
        </member>
        <member name="P:fNbt.NbtIntArray.Item(System.Int32)">
            <summary> Gets or sets an integer at the given index. </summary>
            <param name="tagIndex"> The zero-based index of the element to get or set. </param>
            <returns> The integer at the specified index. </returns>
            <exception cref="T:System.IndexOutOfRangeException"> <paramref name="tagIndex"/> is outside the array bounds. </exception>
        </member>
        <member name="T:fNbt.NbtByte">
            <summary> A tag containing a single byte. </summary>
        </member>
        <member name="P:fNbt.NbtByte.TagType">
            <summary> Type of this tag (Byte). </summary>
        </member>
        <member name="P:fNbt.NbtByte.Value">
            <summary> Value/payload of this tag (a single byte). </summary>
        </member>
        <member name="M:fNbt.NbtByte.#ctor">
            <summary> Creates an unnamed NbtByte tag with the default value of 0. </summary>
        </member>
        <member name="M:fNbt.NbtByte.#ctor(System.Byte)">
            <summary> Creates an unnamed NbtByte tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtByte.#ctor(System.String)">
            <summary> Creates an NbtByte tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtByte.#ctor(System.String,System.Byte)">
            <summary> Creates an NbtByte tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtByte.#ctor(fNbt.NbtByte)">
            <summary> Creates a copy of given NbtByte tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtByteArray">
            <summary> A tag containing an array of bytes. </summary>
        </member>
        <member name="P:fNbt.NbtByteArray.TagType">
            <summary> Type of this tag (ByteArray). </summary>
        </member>
        <member name="P:fNbt.NbtByteArray.Value">
            <summary> Value/payload of this tag (an array of bytes). Value is stored as-is and is NOT cloned. May not be <c>null</c>. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtByteArray.#ctor">
            <summary> Creates an unnamed NbtByte tag, containing an empty array of bytes. </summary>
        </member>
        <member name="M:fNbt.NbtByteArray.#ctor(System.Byte[])">
            <summary> Creates an unnamed NbtByte tag, containing the given array of bytes. </summary>
            <param name="value"> Byte array to assign to this tag's Value. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
            <remarks> Given byte array will be cloned. To avoid unnecessary copying, call one of the other constructor
            overloads (that do not take a byte[]) and then set the Value property yourself. </remarks>
        </member>
        <member name="M:fNbt.NbtByteArray.#ctor(System.String)">
            <summary> Creates an NbtByte tag with the given name, containing an empty array of bytes. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtByteArray.#ctor(System.String,System.Byte[])">
            <summary> Creates an NbtByte tag with the given name, containing the given array of bytes. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Byte array to assign to this tag's Value. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
            <remarks> Given byte array will be cloned. To avoid unnecessary copying, call one of the other constructor
            overloads (that do not take a byte[]) and then set the Value property yourself. </remarks>
        </member>
        <member name="M:fNbt.NbtByteArray.#ctor(fNbt.NbtByteArray)">
            <summary> Creates a deep copy of given NbtByteArray. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
            <remarks> Byte array of given tag will be cloned. </remarks>
        </member>
        <member name="P:fNbt.NbtByteArray.Item(System.Int32)">
            <summary> Gets or sets a byte at the given index. </summary>
            <param name="tagIndex"> The zero-based index of the element to get or set. </param>
            <returns> The byte at the specified index. </returns>
            <exception cref="T:System.IndexOutOfRangeException"> <paramref name="tagIndex"/> is outside the array bounds. </exception>
        </member>
        <member name="T:fNbt.NbtCompound">
            <summary> A tag containing a set of other named tags. Order is not guaranteed. </summary>
        </member>
        <member name="P:fNbt.NbtCompound.TagType">
            <summary> Type of this tag (Compound). </summary>
        </member>
        <member name="M:fNbt.NbtCompound.#ctor">
            <summary> Creates an empty unnamed NbtByte tag. </summary>
        </member>
        <member name="M:fNbt.NbtCompound.#ctor(System.String)">
            <summary> Creates an empty NbtByte tag with the given name. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtCompound.#ctor(System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Creates an unnamed NbtByte tag, containing the given tags. </summary>
            <param name="tags"> Collection of tags to assign to this tag's Value. May not be null </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is <c>null</c>, or one of the tags is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If some of the given tags were not named, or two tags with the same name were given. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.#ctor(System.String,System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Creates an NbtByte tag with the given name, containing the given tags. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="tags"> Collection of tags to assign to this tag's Value. May not be null </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is <c>null</c>, or one of the tags is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If some of the given tags were not named, or two tags with the same name were given. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.#ctor(fNbt.NbtCompound)">
            <summary> Creates a deep copy of given NbtCompound. </summary>
            <param name="other"> An existing NbtCompound to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="P:fNbt.NbtCompound.Item(System.String)">
            <summary> Gets or sets the tag with the specified name. May return <c>null</c>. </summary>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <param name="tagName"> The name of the tag to get or set. Must match tag's actual name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>; or if trying to assign null value. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="tagName"/> does not match the given tag's actual name;
            or given tag already has a Parent. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Get``1(System.String)">
            <summary> Gets the tag with the specified name. May return <c>null</c>. </summary>
            <param name="tagName"> The name of the tag to get. </param>
            <typeparam name="T"> Type to cast the result to. Must derive from NbtTag. </typeparam>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Get(System.String)">
            <summary> Gets the tag with the specified name. May return <c>null</c>. </summary>
            <param name="tagName"> The name of the tag to get. </param>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.TryGet``1(System.String,``0@)">
            <summary> Gets the tag with the specified name. </summary>
            <param name="tagName"> The name of the tag to get. </param>
            <param name="result"> When this method returns, contains the tag associated with the specified name, if the tag is found;
            otherwise, null. This parameter is passed uninitialized. </param>
            <typeparam name="T"> Type to cast the result to. Must derive from NbtTag. </typeparam>
            <returns> true if the NbtCompound contains a tag with the specified name; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.TryGet(System.String,fNbt.NbtTag@)">
            <summary> Gets the tag with the specified name. </summary>
            <param name="tagName"> The name of the tag to get. </param>
            <param name="result"> When this method returns, contains the tag associated with the specified name, if the tag is found;
            otherwise, null. This parameter is passed uninitialized. </param>
            <returns> true if the NbtCompound contains a tag with the specified name; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.AddRange(System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Adds all tags from the specified collection to this NbtCompound. </summary>
            <param name="newTags"> The collection whose elements should be added to this NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTags"/> is <c>null</c>, or one of the tags in newTags is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If one of the given tags was unnamed,
            or if a tag with the given name already exists in this NbtCompound. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Contains(System.String)">
            <summary> Determines whether this NbtCompound contains a tag with a specific name. </summary>
            <param name="tagName"> Tag name to search for. May not be <c>null</c>. </param>
            <returns> true if a tag with given name was found; otherwise, false. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Remove(System.String)">
            <summary> Removes the tag with the specified name from this NbtCompound. </summary>
            <param name="tagName"> The name of the tag to remove. </param>
            <returns> true if the tag is successfully found and removed; otherwise, false.
            This method returns false if name is not found in the NbtCompound. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tagName"/> is <c>null</c>. </exception>
        </member>
        <member name="P:fNbt.NbtCompound.Names">
            <summary> Gets a collection containing all tag names in this NbtCompound. </summary>
        </member>
        <member name="P:fNbt.NbtCompound.Tags">
            <summary> Gets a collection containing all tags in this NbtCompound. </summary>
        </member>
        <member name="M:fNbt.NbtCompound.GetEnumerator">
            <summary> Returns an enumerator that iterates through all tags in this NbtCompound. </summary>
            <returns> An IEnumerator&gt;NbtTag&lt; that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:fNbt.NbtCompound.Add(fNbt.NbtTag)">
            <summary> Adds a tag to this NbtCompound. </summary>
            <param name="newTag"> The object to add to this NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTag"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If the given tag is unnamed;
            or if a tag with the given name already exists in this NbtCompound. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Clear">
            <summary> Removes all tags from this NbtCompound. </summary>
        </member>
        <member name="M:fNbt.NbtCompound.Contains(fNbt.NbtTag)">
            <summary> Determines whether this NbtCompound contains a specific NbtTag.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag is found; otherwise, false. </returns>
            <param name="tag"> The object to locate in this NbtCompound. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.CopyTo(fNbt.NbtTag[],System.Int32)">
            <summary> Copies the tags of the NbtCompound to an array, starting at a particular array index. </summary>
            <param name="array"> The one-dimensional array that is the destination of the tag copied from NbtCompound.
            The array must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> arrayIndex is less than 0. </exception>
            <exception cref="T:System.ArgumentException"> Given array is multidimensional; arrayIndex is equal to or greater than the length of array;
            the number of tags in this NbtCompound is greater than the available space from arrayIndex to the end of the destination array;
            or type NbtTag cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:fNbt.NbtCompound.Remove(fNbt.NbtTag)">
            <summary> Removes the first occurrence of a specific NbtTag from the NbtCompound.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag was successfully removed from the NbtCompound; otherwise, false.
            This method also returns false if tag is not found. </returns>
            <param name="tag"> The tag to remove from the NbtCompound. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If the given tag is unnamed </exception>
        </member>
        <member name="P:fNbt.NbtCompound.Count">
            <summary> Gets the number of tags contained in the NbtCompound. </summary>
            <returns> The number of tags contained in the NbtCompound. </returns>
        </member>
        <member name="T:fNbt.NbtDouble">
            <summary> A tag containing a double-precision floating point number. </summary>
        </member>
        <member name="P:fNbt.NbtDouble.TagType">
            <summary> Type of this tag (Double). </summary>
        </member>
        <member name="P:fNbt.NbtDouble.Value">
            <summary> Value/payload of this tag (a double-precision floating point number). </summary>
        </member>
        <member name="M:fNbt.NbtDouble.#ctor">
            <summary> Creates an unnamed NbtDouble tag with the default value of 0. </summary>
        </member>
        <member name="M:fNbt.NbtDouble.#ctor(System.Double)">
            <summary> Creates an unnamed NbtDouble tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtDouble.#ctor(System.String)">
            <summary> Creates an NbtDouble tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtDouble.#ctor(System.String,System.Double)">
            <summary> Creates an NbtDouble tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtDouble.#ctor(fNbt.NbtDouble)">
            <summary> Creates a copy of given NbtDouble tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtFloat">
            <summary> A tag containing a single-precision floating point number. </summary>
        </member>
        <member name="P:fNbt.NbtFloat.TagType">
            <summary> Type of this tag (Float). </summary>
        </member>
        <member name="P:fNbt.NbtFloat.Value">
            <summary> Value/payload of this tag (a single-precision floating point number). </summary>
        </member>
        <member name="M:fNbt.NbtFloat.#ctor">
            <summary> Creates an unnamed NbtFloat tag with the default value of 0f. </summary>
        </member>
        <member name="M:fNbt.NbtFloat.#ctor(System.Single)">
            <summary> Creates an unnamed NbtFloat tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtFloat.#ctor(System.String)">
            <summary> Creates an NbtFloat tag with the given name and the default value of 0f. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtFloat.#ctor(System.String,System.Single)">
            <summary> Creates an NbtFloat tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtFloat.#ctor(fNbt.NbtFloat)">
            <summary> Creates a copy of given NbtFloat tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtInt">
            <summary> A tag containing a single signed 32-bit integer. </summary>
        </member>
        <member name="P:fNbt.NbtInt.TagType">
            <summary> Type of this tag (Int). </summary>
        </member>
        <member name="P:fNbt.NbtInt.Value">
            <summary> Value/payload of this tag (a single signed 32-bit integer). </summary>
        </member>
        <member name="M:fNbt.NbtInt.#ctor">
            <summary> Creates an unnamed NbtInt tag with the default value of 0. </summary>
        </member>
        <member name="M:fNbt.NbtInt.#ctor(System.Int32)">
            <summary> Creates an unnamed NbtInt tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtInt.#ctor(System.String)">
            <summary> Creates an NbtInt tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtInt.#ctor(System.String,System.Int32)">
            <summary> Creates an NbtInt tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtInt.#ctor(fNbt.NbtInt)">
            <summary> Creates a copy of given NbtInt tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtList">
            <summary> A tag containing a list of unnamed tags, all of the same kind. </summary>
        </member>
        <member name="P:fNbt.NbtList.TagType">
            <summary> Type of this tag (List). </summary>
        </member>
        <member name="P:fNbt.NbtList.ListType">
            <summary> Gets or sets the tag type of this list. All tags in this NbtTag must be of the same type. </summary>
            <exception cref="T:System.ArgumentException"> If the given NbtTagType does not match the type of existing list items (for non-empty lists). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the given NbtTagType is a recognized tag type. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor">
            <summary> Creates an unnamed NbtList with empty contents and undefined ListType. </summary>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.String)">
            <summary> Creates an NbtList with given name, empty contents, and undefined ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Creates an unnamed NbtList with the given contents, and inferred ListType. 
            If given tag array is empty, NbtTagType remains Unknown. </summary>
            <param name="tags"> Collection of tags to insert into the list. All tags are expected to be of the same type.
            ListType is inferred from the first tag. List may be empty, but may not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If given tags are of mixed types. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(fNbt.NbtTagType)">
            <summary> Creates an unnamed NbtList with empty contents and an explicitly specified ListType.
            If ListType is Unknown, it will be inferred from the type of the first added tag.
            Otherwise, all tags added to this list are expected to be of the given type. </summary>
            <param name="givenListType"> Name to assign to this tag. May be Unknown. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="givenListType"/> is not a recognized tag type. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.String,System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Creates an NbtList with the given name and contents, and inferred ListType. 
            If given tag array is empty, NbtTagType remains Unknown. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="tags"> Collection of tags to insert into the list. All tags are expected to be of the same type.
            ListType is inferred from the first tag. List may be empty, but may not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If given tags are of mixed types. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.Collections.Generic.IEnumerable{fNbt.NbtTag},fNbt.NbtTagType)">
            <summary> Creates an unnamed NbtList with the given contents, and an explicitly specified ListType. </summary>
            <param name="tags"> Collection of tags to insert into the list.
            All tags are expected to be of the same type (matching givenListType).
            List may be empty, but may not be <c>null</c>. </param>
            <param name="givenListType"> Name to assign to this tag. May be Unknown (to infer type from the first element of tags). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tags"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="givenListType"/> is not a valid tag type. </exception>
            <exception cref="T:System.ArgumentException"> If given tags do not match <paramref name="givenListType"/>, or are of mixed types. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.String,fNbt.NbtTagType)">
            <summary> Creates an NbtList with the given name, empty contents, and an explicitly specified ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="givenListType"> Name to assign to this tag.
            If givenListType is Unknown, ListType will be inferred from the first tag added to this NbtList. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="givenListType"/> is not a valid tag type. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(System.String,System.Collections.Generic.IEnumerable{fNbt.NbtTag},fNbt.NbtTagType)">
            <summary> Creates an NbtList with the given name and contents, and an explicitly specified ListType. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="tags"> Collection of tags to insert into the list.
            All tags are expected to be of the same type (matching givenListType). May be empty or <c>null</c>. </param>
            <param name="givenListType"> Name to assign to this tag. May be Unknown (to infer type from the first element of tags). </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="givenListType"/> is not a valid tag type. </exception>
            <exception cref="T:System.ArgumentException"> If given tags do not match <paramref name="givenListType"/>, or are of mixed types. </exception>
        </member>
        <member name="M:fNbt.NbtList.#ctor(fNbt.NbtList)">
            <summary> Creates a deep copy of given NbtList. </summary>
            <param name="other"> An existing NbtList to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="P:fNbt.NbtList.Item(System.Int32)">
            <summary> Gets or sets the tag at the specified index. </summary>
            <returns> The tag at the specified index. </returns>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="tagIndex"/> is not a valid index in the NbtList. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> Given tag's type does not match ListType. </exception>
        </member>
        <member name="M:fNbt.NbtList.Get``1(System.Int32)">
            <summary> Gets or sets the tag with the specified name. </summary>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <typeparam name="T"> Type to cast the result to. Must derive from NbtTag. </typeparam>
            <returns> The tag with the specified key. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="tagIndex"/> is not a valid index in the NbtList. </exception>
            <exception cref="T:System.InvalidCastException"> If tag could not be cast to the desired tag. </exception>
        </member>
        <member name="M:fNbt.NbtList.AddRange(System.Collections.Generic.IEnumerable{fNbt.NbtTag})">
            <summary> Adds all tags from the specified collection to the end of this NbtList. </summary>
            <param name="newTags"> The collection whose elements should be added to this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTags"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If given tags do not match ListType, or are of mixed types. </exception>
        </member>
        <member name="M:fNbt.NbtList.ToArray">
            <summary> Copies all tags in this NbtList to an array. </summary>
            <returns> Array of NbtTags. </returns>
        </member>
        <member name="M:fNbt.NbtList.ToArray``1">
            <summary> Copies all tags in this NbtList to an array, and casts it to the desired type. </summary>
            <typeparam name="T"> Type to cast every member of NbtList to. Must derive from NbtTag. </typeparam>
            <returns> Array of NbtTags cast to the desired type. </returns>
            <exception cref="T:System.InvalidCastException"> If contents of this list cannot be cast to the given type. </exception>
        </member>
        <member name="M:fNbt.NbtList.GetEnumerator">
            <summary> Returns an enumerator that iterates through all tags in this NbtList. </summary>
            <returns> An IEnumerator&gt;NbtTag&lt; that can be used to iterate through the list. </returns>
        </member>
        <member name="M:fNbt.NbtList.IndexOf(fNbt.NbtTag)">
            <summary> Determines the index of a specific tag in this NbtList </summary>
            <returns> The index of tag if found in the list; otherwise, -1. </returns>
            <param name="tag"> The tag to locate in this NbtList. </param>
        </member>
        <member name="M:fNbt.NbtList.Insert(System.Int32,fNbt.NbtTag)">
            <summary> Inserts an item to this NbtList at the specified index. </summary>
            <param name="tagIndex"> The zero-based index at which newTag should be inserted. </param>
            <param name="newTag"> The tag to insert into this NbtList. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="tagIndex"/> is not a valid index in this NbtList. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTag"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtList.RemoveAt(System.Int32)">
            <summary> Removes a tag at the specified index from this NbtList. </summary>
            <param name="index"> The zero-based index of the item to remove. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index"/> is not a valid index in the NbtList. </exception>
        </member>
        <member name="M:fNbt.NbtList.Add(fNbt.NbtTag)">
            <summary> Adds a tag to this NbtList. </summary>
            <param name="newTag"> The tag to add to this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newTag"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> If <paramref name="newTag"/> does not match ListType. </exception>
        </member>
        <member name="M:fNbt.NbtList.Clear">
            <summary> Removes all tags from this NbtList. </summary>
        </member>
        <member name="M:fNbt.NbtList.Contains(fNbt.NbtTag)">
            <summary> Determines whether this NbtList contains a specific tag. </summary>
            <returns> true if given tag is found in this NbtList; otherwise, false. </returns>
            <param name="item"> The tag to locate in this NbtList. </param>
        </member>
        <member name="M:fNbt.NbtList.CopyTo(fNbt.NbtTag[],System.Int32)">
            <summary> Copies the tags of this NbtList to an array, starting at a particular array index. </summary>
            <param name="array"> The one-dimensional array that is the destination of the tag copied from NbtList.
            The array must have zero-based indexing. </param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="array"/> is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> arrayIndex is less than 0. </exception>
            <exception cref="T:System.ArgumentException"> Given array is multidimensional; arrayIndex is equal to or greater than the length of array;
            the number of tags in this NbtList is greater than the available space from arrayIndex to the end of the destination array;
            or type NbtTag cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:fNbt.NbtList.Remove(fNbt.NbtTag)">
            <summary> Removes the first occurrence of a specific NbtTag from the NbtCompound.
            Looks for exact object matches, not name matches. </summary>
            <returns> true if tag was successfully removed from this NbtList; otherwise, false.
            This method also returns false if tag is not found. </returns>
            <param name="tag"> The tag to remove from this NbtList. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tag"/> is <c>null</c>. </exception>
        </member>
        <member name="P:fNbt.NbtList.Count">
            <summary> Gets the number of tags contained in the NbtList. </summary>
            <returns> The number of tags contained in the NbtList. </returns>
        </member>
        <member name="T:fNbt.NbtLong">
            <summary> A tag containing a single signed 64-bit integer. </summary>
        </member>
        <member name="P:fNbt.NbtLong.TagType">
            <summary> Type of this tag (Long). </summary>
        </member>
        <member name="P:fNbt.NbtLong.Value">
            <summary> Value/payload of this tag (a single signed 64-bit integer). </summary>
        </member>
        <member name="M:fNbt.NbtLong.#ctor">
            <summary> Creates an unnamed NbtLong tag with the default value of 0. </summary>
        </member>
        <member name="M:fNbt.NbtLong.#ctor(System.Int64)">
            <summary> Creates an unnamed NbtLong tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtLong.#ctor(System.String)">
            <summary> Creates an NbtLong tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtLong.#ctor(System.String,System.Int64)">
            <summary> Creates an NbtLong tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtLong.#ctor(fNbt.NbtLong)">
            <summary> Creates a copy of given NbtLong tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtShort">
            <summary> A tag containing a single signed 16-bit integer. </summary>
        </member>
        <member name="P:fNbt.NbtShort.TagType">
            <summary> Type of this tag (Short). </summary>
        </member>
        <member name="P:fNbt.NbtShort.Value">
            <summary> Value/payload of this tag (a single signed 16-bit integer). </summary>
        </member>
        <member name="M:fNbt.NbtShort.#ctor">
            <summary> Creates an unnamed NbtShort tag with the default value of 0. </summary>
        </member>
        <member name="M:fNbt.NbtShort.#ctor(System.Int16)">
            <summary> Creates an unnamed NbtShort tag with the given value. </summary>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtShort.#ctor(System.String)">
            <summary> Creates an NbtShort tag with the given name and the default value of 0. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
        </member>
        <member name="M:fNbt.NbtShort.#ctor(System.String,System.Int16)">
            <summary> Creates an NbtShort tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> Value to assign to this tag. </param>
        </member>
        <member name="M:fNbt.NbtShort.#ctor(fNbt.NbtShort)">
            <summary> Creates a copy of given NbtShort tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtString">
            <summary> A tag containing a single string. String is stored in UTF-8 encoding. </summary>
        </member>
        <member name="P:fNbt.NbtString.TagType">
            <summary> Type of this tag (String). </summary>
        </member>
        <member name="P:fNbt.NbtString.Value">
            <summary> Value/payload of this tag (a single string). May not be <c>null</c>. </summary>
        </member>
        <member name="M:fNbt.NbtString.#ctor">
            <summary> Creates an unnamed NbtString tag with the default value (empty string). </summary>
        </member>
        <member name="M:fNbt.NbtString.#ctor(System.String)">
            <summary> Creates an unnamed NbtString tag with the given value. </summary>
            <param name="value"> String value to assign to this tag. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtString.#ctor(System.String,System.String)">
            <summary> Creates an NbtString tag with the given name and value. </summary>
            <param name="tagName"> Name to assign to this tag. May be <c>null</c>. </param>
            <param name="value"> String value to assign to this tag. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
        </member>
        <member name="M:fNbt.NbtString.#ctor(fNbt.NbtString)">
            <summary> Creates a copy of given NbtString tag. </summary>
            <param name="other"> Tag to copy. May not be <c>null</c>. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtTag">
            <summary> Base class for different kinds of named binary tags. </summary>
        </member>
        <member name="P:fNbt.NbtTag.Parent">
            <summary> Parent compound tag, either NbtList or NbtCompound, if any.
            May be <c>null</c> for detached tags. </summary>
        </member>
        <member name="P:fNbt.NbtTag.TagType">
            <summary> Type of this tag. </summary>
        </member>
        <member name="P:fNbt.NbtTag.HasValue">
            <summary> Returns true if tags of this type have a value attached.
            All tags except Compound, List, and End have values. </summary>
        </member>
        <member name="P:fNbt.NbtTag.Name">
            <summary> Name of this tag. Immutable, and set by the constructor. May be <c>null</c>. </summary>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="value"/> is <c>null</c>, and <c>Parent</c> tag is an NbtCompound.
            Name of tags inside an <c>NbtCompound</c> may not be null. </exception>
            <exception cref="T:System.ArgumentException"> If this tag resides in an <c>NbtCompound</c>, and a sibling tag with the name already exists. </exception>
        </member>
        <member name="P:fNbt.NbtTag.Path">
            <summary> Gets the full name of this tag, including all parent tag names, separated by dots. 
            Unnamed tags show up as empty strings. </summary>
        </member>
        <member name="P:fNbt.NbtTag.Item(System.String)">
            <summary> Gets or sets the tag with the specified name. May return <c>null</c>. </summary>
            <returns> The tag with the specified key. Null if tag with the given name was not found. </returns>
            <param name="tagName"> The name of the tag to get or set. Must match tag's actual name. </param>
            <exception cref="T:System.InvalidOperationException"> If used on a tag that is not NbtCompound. </exception>
            <remarks> ONLY APPLICABLE TO NbtCompound OBJECTS!
            Included in NbtTag base class for programmers' convenience, to avoid extra type casts. </remarks>
        </member>
        <member name="P:fNbt.NbtTag.Item(System.Int32)">
            <summary> Gets or sets the tag at the specified index. </summary>
            <returns> The tag at the specified index. </returns>
            <param name="tagIndex"> The zero-based index of the tag to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> tagIndex is not a valid index in this tag. </exception>
            <exception cref="T:System.ArgumentNullException"> Given tag is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException"> Given tag's type does not match ListType. </exception>
            <exception cref="T:System.InvalidOperationException"> If used on a tag that is not NbtList, NbtByteArray, or NbtIntArray. </exception>
            <remarks> ONLY APPLICABLE TO NbtList, NbtByteArray, and NbtIntArray OBJECTS!
            Included in NbtTag base class for programmers' convenience, to avoid extra type casts. </remarks>
        </member>
        <member name="P:fNbt.NbtTag.ByteValue">
            <summary> Returns the value of this tag, cast as a byte.
            Only supported by NbtByte tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtByte. </exception>
        </member>
        <member name="P:fNbt.NbtTag.ShortValue">
            <summary> Returns the value of this tag, cast as a short (16-bit signed integer).
            Only supported by NbtByte and NbtShort. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:fNbt.NbtTag.IntValue">
            <summary> Returns the value of this tag, cast as an int (32-bit signed integer).
            Only supported by NbtByte, NbtShort, and NbtInt. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:fNbt.NbtTag.LongValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:fNbt.NbtTag.FloatValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtFloat and, with loss of precision, by NbtDouble, NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:fNbt.NbtTag.DoubleValue">
            <summary> Returns the value of this tag, cast as a long (64-bit signed integer).
            Only supported by NbtFloat, NbtDouble, and, with loss of precision, by NbtByte, NbtShort, NbtInt, and NbtLong. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="P:fNbt.NbtTag.ByteArrayValue">
            <summary> Returns the value of this tag, cast as a byte array.
            Only supported by NbtByteArray tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtByteArray. </exception>
        </member>
        <member name="P:fNbt.NbtTag.IntArrayValue">
            <summary> Returns the value of this tag, cast as an int array.
            Only supported by NbtIntArray tags. </summary>
            <exception cref="T:System.InvalidCastException"> When used on a tag other than NbtIntArray. </exception>
        </member>
        <member name="P:fNbt.NbtTag.StringValue">
            <summary> Returns the value of this tag, cast as a string.
            Returns exact value for NbtString, and stringified (using InvariantCulture) value for NbtByte, NbtDouble, NbtFloat, NbtInt, NbtLong, and NbtShort.
            Not supported by NbtCompound, NbtList, NbtByteArray, or NbtIntArray. </summary>
            <exception cref="T:System.InvalidCastException"> When used on an unsupported tag. </exception>
        </member>
        <member name="M:fNbt.NbtTag.GetCanonicalTagName(fNbt.NbtTagType)">
            <summary> Returns a canonical (Notchy) name for the given NbtTagType,
            e.g. "TAG_Byte_Array" for NbtTagType.ByteArray </summary>
            <param name="type"> NbtTagType to name. </param>
            <returns> String representing the canonical name of a tag,
            or null of given TagType does not have a canonical name (e.g. Unknown). </returns>
        </member>
        <member name="M:fNbt.NbtTag.ToString">
            <summary> Prints contents of this tag, and any child tags, to a string.
            Indents the string using multiples of the given indentation string. </summary>
            <returns> A string representing contents of this tag, and all child tags (if any). </returns>
        </member>
        <member name="M:fNbt.NbtTag.Clone">
            <summary> Creates a deep copy of this tag. </summary>
            <returns> A new NbtTag object that is a deep copy of this instance. </returns>
        </member>
        <member name="M:fNbt.NbtTag.ToString(System.String)">
            <summary> Prints contents of this tag, and any child tags, to a string.
            Indents the string using multiples of the given indentation string. </summary>
            <param name="indentString"> String to be used for indentation. </param>
            <returns> A string representing contents of this tag, and all child tags (if any). </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="indentString"/> is <c>null</c>. </exception>
        </member>
        <member name="P:fNbt.NbtTag.DefaultIndentString">
            <summary> String to use for indentation in NbtTag's and NbtFile's ToString() methods by default. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value"/> is <c>null</c>. </exception>
        </member>
        <member name="T:fNbt.NbtTagType">
            <summary> Enumeration of named binary tag types, and their corresponding codes. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Unknown">
            <summary> Placeholder TagType used to indicate unknown/undefined tag type in NbtList. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.End">
            <summary> TAG_End: This unnamed tag serves no purpose but to signify the end of an open TAG_Compound. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Byte">
            <summary> TAG_Byte: A single byte. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Short">
            <summary> TAG_Short: A single signed 16-bit integer. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Int">
            <summary> TAG_Int: A single signed 32-bit integer. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Long">
            <summary> TAG_Long: A single signed 64-bit integer. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Float">
            <summary> TAG_Float: A single IEEE-754 single-precision floating point number. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Double">
            <summary> TAG_Double: A single IEEE-754 double-precision floating point number. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.ByteArray">
            <summary> TAG_Byte_Array: A length-prefixed array of bytes. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.String">
            <summary> TAG_String: A length-prefixed UTF-8 string. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.List">
            <summary> TAG_List: A list of nameless tags, all of the same type. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.Compound">
            <summary> TAG_Compound: A set of named tags. </summary>
        </member>
        <member name="F:fNbt.NbtTagType.IntArray">
            <summary> TAG_Byte_Array: A length-prefixed array of signed 32-bit integers. </summary>
        </member>
        <member name="T:fNbt.ZLibStream">
            <summary> DeflateStream wrapper that calculates Adler32 checksum of the written data,
            to allow writing ZLib header (RFC-1950). </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary> Indicates that the value of marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage. </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary> Indicates that the value of marked element could never be <c>null</c>. </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary> Indicates that method doesn't contain observable side effects. </summary>
        </member>
    </members>
</doc>
